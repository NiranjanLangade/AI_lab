class Solution {
    char [][]ans;
    public boolean isValid(char [][]board,int row,int col,char digit)
    {
        for(int i=0;i<9;i++)
        {
            if(board[row][i]==digit)
            {
                return false;
            }
            
        }
         for(int i=0;i<9;i++)
        {
            if(board[i][col]==digit)
            {
                return false;
            }
            
        }
        int smr=row/3*3;
        int smc=col/3*3;
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                if(board[smr+i][smc+j]==digit)
                return false;
            }
        }
        return true;
    }

    public void solve(char[][]board,int row,int col)
    {
        if(row==board.length)
        {
            for(int i=0;i<9;i++)
            {
                for(int j=0;j<9;j++)
                {
                    ans[i][j]=board[i][j];
                }
            }
            return;
        }
        int nr;
        int nc;
        if(col==8)
        {
            nr=row+1;
            nc=0;
        }
        else
        {
            nr=row;
            nc=col+1;
        }
        if(board[row][col]!='.')
        solve(board,nr,nc);
        else
        {

        
        for(int i=1;i<=9;i++)
        {
            if(board[row][col]=='.')
            {
                char digit=(char)('0'+i);
                if(isValid(board,row,col,digit))
                {
                    board[row][col]=digit;
                    solve(board,nr,nc);
                    board[row][col]='.';
                }
            }
        }
        }
    }
    public void solveSudoku(char[][] board) {
        ans=new char[9][9];
        solve(board,0,0);
        for(int i=0;i<9;i++)
            {
                for(int j=0;j<9;j++)
                {
                    board[i][j]=ans[i][j];
                }
            }
    }
}
